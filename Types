In Java, generics provide a way to create classes, interfaces, and methods that operate on types specified by the user. Different type parameter notations have become standard, each with a specific conventional use that helps make the code more readable and maintainable. Here's a detailed explanation of common type parameter notations and their typical usage, along with examples:

### Common Type Parameter Notations and Their Examples

1. **`E` (Element)**
   - **Usage**: Primarily used in the Java Collections Framework to represent an element in a collection.
   - **Example**:
     ```java
     public interface List<E> {
         void add(E element);
         E get(int index);
     }

     // Usage
     List<String> stringList = new ArrayList<>();
     stringList.add("Hello");
     String str = stringList.get(0);
     ```

2. **`K` (Key)**
   - **Usage**: Used to represent the key in a key-value pair, typically in map-related data structures.
   - **Example**:
     ```java
     public interface Map<K, V> {
         V get(K key);
         void put(K key, V value);
     }

     // Usage
     Map<String, Integer> ageMap = new HashMap<>();
     ageMap.put("Alice", 30);
     int age = ageMap.get("Alice");
     ```

3. **`V` (Value)**
   - **Usage**: Used to represent the value in a key-value pair.
   - **Example**:
     ```java
     public interface Map<K, V> {
         V get(K key);
         void put(K key, V value);
     }

     // Usage
     Map<String, Integer> ageMap = new HashMap<>();
     ageMap.put("Alice", 30);
     int age = ageMap.get("Alice");
     ```

4. **`N` (Number)**
   - **Usage**: Used to represent numeric types.
   - **Example**:
     ```java
     public class NumericBox<N extends Number> {
         private N number;

         public void setNumber(N number) {
             this.number = number;
         }

         public N getNumber() {
             return number;
         }
     }

     // Usage
     NumericBox<Integer> intBox = new NumericBox<>();
     intBox.setNumber(10);
     Integer num = intBox.getNumber();
     ```

5. **`T` (Type)**
   - **Usage**: Represents a generic type. The most commonly used type parameter.
   - **Example**:
     ```java
     public class Box<T> {
         private T item;

         public void setItem(T item) {
             this.item = item;
         }

         public T getItem() {
             return item;
         }
     }

     // Usage
     Box<String> stringBox = new Box<>();
     stringBox.setItem("Hello");
     String str = stringBox.getItem();
     ```

6. **`S`, `U`, `V`, etc. (Additional Type Parameters)**
   - **Usage**: Used when more than one type parameter is needed. These are typically used in methods or classes that operate on multiple types.
   - **Example**:
     ```java
     public class Pair<U, V> {
         private U first;
         private V second;

         public Pair(U first, V second) {
             this.first = first;
             this.second = second;
         }

         public U getFirst() {
             return first;
         }

         public V getSecond() {
             return second;
         }
     }

     // Usage
     Pair<String, Integer> pair = new Pair<>("Age", 30);
     String key = pair.getFirst();
     Integer value = pair.getSecond();
     ```

### Summary of Notations

- **`E`**: Element, used in collections like `List<E>`, `Set<E>`.
- **`K`**: Key, used in maps like `Map<K, V>`.
- **`V`**: Value, used in maps like `Map<K, V>`.
- **`N`**: Number, used for numeric types.
- **`T`**: Type, a general placeholder for any type.
- **`S`, `U`, `V`**: Additional type parameters, used when more than one type is involved.

These conventions help clarify the purpose of each type parameter, making the code easier to understand and work with.